Avx2.Add			_mm256_add_epi32				1	0.33
Avx2.Add			_mm256_add_epi64				1	0.33
Avx2.And			_mm256_and_si256				1	0.33
Avx2.or			_mm256_or_si256				1	0.33
Avx2.Xor			_mm256_xor_si256				1	0.33

Avx2.ShiftLeftLogical	_mm256_slli_epi64				1	0.5
Avx2.ShiftRightLogical	_mm256_srli_epi32				1	0.5
Avx2.ShiftRightLogical	_mm256_srli_epi64				1	0.5
Avx2.CompareEqual		_mm256_cmpeq_epi32			1	0.5
Avx2.CompareGreaterThan	_mm256_cmpgt_epi32			1	0.5

Avx2.BlendVariable	_mm256_blendv_epi8			2	0.66
Avx2.MoveMask		_mm256_movemask_epi8			2	1
Avx2.PermuteVar8x32	_mm256_permutevar8x32_epi32		3	1
Avx2.Multiply		_mm256_mul_epu32				5	0.5		



---- 
Square = GetSignBits + ConvertFrom2C + SquareInternal + SumThePartials + ShiftAndTrim

GetSignBits			Cmp, And, Mvm		1, 1, 2		1.83

ConvertFrom2C-A		2-And, 2-Per		2, 6			2.66		x LimbCount

ConvertFrom2C-B		Xor, Add, And, Sft	1, 1, 1, 1		1.5		x LimbCount
				Blv, 2-And, 2-Per		2, 2, 6		3.33		x LimbCount
				
SquareInternal		2-Mul, 4-Add,		10, 4			4		x LimbCount!
				2-And, 2-Shf		2, 2			
				2-Shf				2			1		x LimbCount! - 2

SumTheParitals		2-And, 2-Sft, 2-Xor	2, 2, 2		3		x LimbCount
				2-Add				2			0.66		x LimbCount - 1	

ShiftAndTrim		4-And, 4-Sft, 3-Or	4, 4, 3		6.33		x LimbCount
				2-Per				6					x LimbCount
											
----
Add				2-Add, And, Sft		2, 1, 1		1.5		x LimbCount

---
Sub				3-Add, 2-And, 2-Sft, X	3, 2, 2, 1		3		x LimbCount

---
IsGreaterOrEqThan		And, Cmp			1, 1			0.83


Negate			Xor, Add, And, Sft	1, 1, 1, 1		1.5		x LimbCount


UpdateCountNoZ		Add, Blv, Cmp, Or, Mvm,	1, 2, 1, 1, 2	5.6
				Mvm, Cmp, Blv, Or		2, 1, 2, 1


---------------
Square	35	x LimbCount
		14 	x LimbCount -- if branch: ConvertFrom2C-B is taken
		14	x LimbCount!
		2	x LimbCount! - 2
		2	x LimbCount - 1

Add		4	x LimbCount
Sub		8	x LimbCount

IsGt		2
UpCnt		13


// First
2-Square			70
Add				 4			
IsGreaterOrEqThan		 2
UpCnt				13

// All Subsequent
4-Add				 12
3-Square			105
3-Sub				 24

IsGreaterOrEqThan	  2
UpCnt				 13



Limb Count

3		141 x 3, 2, 13	+ 6 x 14	+ 4 x 2		+ 2 x 2		+ 14 x 3 (for all Conv2C-B's)
4		141 x 4, 2, 13	+ 10 x 14	+ 8 x 2		+ 3 x 2		+ 14 x 4						
5		141 x 5, 2, 13	+ 15 x 14	+ 13 x 2	+ 4 x 2		+ 14 x 5	

3		423	+84		+8		+4	
4		564	+140	+16		+6
5		705	+210	+26		+8

3		519		+ 42 x Vecs Negated For Multiplication
4		726		+ 56 x
5		949		+ 70 x 


Dense 4L
67949188 iterations
17948197 iterations where the multiplicands had to be Negated


67949188 x 726 + 17948197 x 56

49,331,110,488
1,005,099,032


50,336,209,520 Clock Cycles		4Ghz = 12.58405238 / 5 cores = 2.516810476 / 3 execution units

Time to Generate = 3.957  7.029 seconds

1.57 times as long as theoretical

